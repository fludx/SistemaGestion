USE [BD_GESTION_STOCK]
GO

--------------------------------------------------------------------------------
-- PROCEDIMIENTOS OPERATIVOS (BASE) - Ejecutar de una sola vez
-- Incluye: Productos, Proveedores, Compras, Clientes, Ventas, Almacén/Stock, Devoluciones, Movimientos, Bitacora
-- Generado para las tablas provistas por el usuario.
--------------------------------------------------------------------------------

/*********************************************************************
 * PRODUCTOS
 *********************************************************************/
CREATE OR ALTER PROCEDURE dbo.sp_AltaProducto
    @codigo NVARCHAR(50),
    @id_categoria INT,
    @nombre NVARCHAR(150),
    @descripcion NVARCHAR(500) = NULL,
    @marca NVARCHAR(100) = NULL,
    @precio_compra DECIMAL(18,2) = NULL,
    @precio_venta DECIMAL(18,2) = NULL,
    @stock_minimo INT = 0,
    @stock_ideal INT = 0,
    @stock_maximo INT = 0,
    @punto_reposicion INT = 0,
    @tipo_stock NVARCHAR(20) = 'Existencia'
AS
BEGIN
    SET NOCOUNT ON;
    INSERT INTO Productos (codigo, id_categoria, nombre, descripcion, marca, precio_compra, precio_venta,
                           stock_minimo, stock_ideal, stock_maximo, punto_reposicion, tipo_stock)
    VALUES (@codigo, @id_categoria, @nombre, @descripcion, @marca, @precio_compra, @precio_venta,
            @stock_minimo, @stock_ideal, @stock_maximo, @punto_reposicion, @tipo_stock);

    SELECT SCOPE_IDENTITY() AS id_producto;
END
GO

CREATE OR ALTER PROCEDURE dbo.sp_ModificarProducto
    @id_producto INT,
    @codigo NVARCHAR(50),
    @id_categoria INT,
    @nombre NVARCHAR(150),
    @descripcion NVARCHAR(500) = NULL,
    @marca NVARCHAR(100) = NULL,
    @precio_compra DECIMAL(18,2) = NULL,
    @precio_venta DECIMAL(18,2) = NULL,
    @stock_minimo INT = 0,
    @stock_ideal INT = 0,
    @stock_maximo INT = 0,
    @punto_reposicion INT = 0,
    @tipo_stock NVARCHAR(20) = 'Existencia'
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE Productos
    SET codigo = @codigo,
        id_categoria = @id_categoria,
        nombre = @nombre,
        descripcion = @descripcion,
        marca = @marca,
        precio_compra = @precio_compra,
        precio_venta = @precio_venta,
        stock_minimo = @stock_minimo,
        stock_ideal = @stock_ideal,
        stock_maximo = @stock_maximo,
        punto_reposicion = @punto_reposicion,
        tipo_stock = @tipo_stock
    WHERE id_producto = @id_producto;
END
GO

CREATE OR ALTER PROCEDURE dbo.sp_EliminarProducto
    @id_producto INT
AS
BEGIN
    SET NOCOUNT ON;
    DELETE FROM Productos WHERE id_producto = @id_producto;
END
GO

CREATE OR ALTER PROCEDURE dbo.sp_ListarProductos
AS
BEGIN
    SET NOCOUNT ON;
    SELECT p.*, c.nombre AS categoria_nombre
    FROM Productos p
    LEFT JOIN Categorias c ON p.id_categoria = c.id_categoria;
END
GO

CREATE OR ALTER PROCEDURE dbo.sp_BuscarProducto
    @codigo NVARCHAR(50) = NULL,
    @nombre NVARCHAR(150) = NULL,
    @id_categoria INT = NULL,
    @marca NVARCHAR(100) = NULL
AS
BEGIN
    SET NOCOUNT ON;
    SELECT * FROM Productos
    WHERE (@codigo IS NULL OR codigo = @codigo)
      AND (@nombre IS NULL OR nombre LIKE '%' + @nombre + '%')
      AND (@id_categoria IS NULL OR id_categoria = @id_categoria)
      AND (@marca IS NULL OR marca LIKE '%' + @marca + '%');
END
GO

CREATE OR ALTER PROCEDURE dbo.sp_ActualizarStock
    @id_producto INT,
    @lote NVARCHAR(50) = NULL,
    @vencimiento DATE = NULL,
    @cantidad INT
AS
BEGIN
    SET NOCOUNT ON;
    -- Inserta un registro de stock (si ya existe lote+vencimiento podría sumar según reglas)
    INSERT INTO Stock_Productos (id_producto, lote, vencimiento, cantidad, fecha_ingreso)
    VALUES (@id_producto, @lote, @vencimiento, @cantidad, CAST(GETDATE() AS DATE));

    INSERT INTO Movimientos_Stock (id_producto, lote, vencimiento, fecha, tipo, cantidad, observaciones)
    VALUES (@id_producto, @lote, @vencimiento, CAST(GETDATE() AS DATE), 'Entrada', @cantidad, 'Ingreso por ajuste/compra');
END
GO

/*********************************************************************
 * PROVEEDORES
 *********************************************************************/
CREATE OR ALTER PROCEDURE dbo.sp_AltaProveedor
    @codigo NVARCHAR(50),
    @razon_social NVARCHAR(200),
    @email NVARCHAR(200) = NULL,
    @formas_pago NVARCHAR(200) = NULL,
    @tiempos_entrega NVARCHAR(100) = NULL,
    @descuentos NVARCHAR(200) = NULL
AS
BEGIN
    SET NOCOUNT ON;
    INSERT INTO Proveedores (codigo, razon_social, email, formas_pago, tiempos_entrega, descuentos)
    VALUES (@codigo, @razon_social, @email, @formas_pago, @tiempos_entrega, @descuentos);

    SELECT SCOPE_IDENTITY() AS id_proveedor;
END
GO

CREATE OR ALTER PROCEDURE dbo.sp_ModificarProveedor
    @id_proveedor INT,
    @codigo NVARCHAR(50),
    @razon_social NVARCHAR(200),
    @email NVARCHAR(200) = NULL,
    @formas_pago NVARCHAR(200) = NULL,
    @tiempos_entrega NVARCHAR(100) = NULL,
    @descuentos NVARCHAR(200) = NULL
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE Proveedores
    SET codigo = @codigo,
        razon_social = @razon_social,
        email = @email,
        formas_pago = @formas_pago,
        tiempos_entrega = @tiempos_entrega,
        descuentos = @descuentos
    WHERE id_proveedor = @id_proveedor;
END
GO

CREATE OR ALTER PROCEDURE dbo.sp_EliminarProveedor
    @id_proveedor INT
AS
BEGIN
    SET NOCOUNT ON;
    DELETE FROM Proveedores WHERE id_proveedor = @id_proveedor;
END
GO

CREATE OR ALTER PROCEDURE dbo.sp_ListarProveedores
    @razon_social NVARCHAR(200) = NULL,
    @codigo NVARCHAR(50) = NULL
AS
BEGIN
    SET NOCOUNT ON;
    SELECT * FROM Proveedores
    WHERE (@razon_social IS NULL OR razon_social LIKE '%' + @razon_social + '%')
      AND (@codigo IS NULL OR codigo = @codigo);
END
GO

CREATE OR ALTER PROCEDURE dbo.sp_AsignarProductoAProveedor
    @id_proveedor INT,
    @id_producto INT
AS
BEGIN
    SET NOCOUNT ON;
    IF NOT EXISTS (SELECT 1 FROM Proveedor_Productos WHERE id_proveedor = @id_proveedor AND id_producto = @id_producto)
    BEGIN
        INSERT INTO Proveedor_Productos (id_proveedor, id_producto)
        VALUES (@id_proveedor, @id_producto);
    END
END
GO

/*********************************************************************
 * ORDENES DE COMPRA
 *********************************************************************/
CREATE OR ALTER PROCEDURE dbo.sp_CrearOrdenCompra
    @id_proveedor INT,
    @fecha DATE,
    @estado NVARCHAR(50) = 'Pendiente',
    @observaciones NVARCHAR(500) = NULL
AS
BEGIN
    SET NOCOUNT ON;
    INSERT INTO Ordenes_Compra (id_proveedor, fecha, estado, observaciones)
    VALUES (@id_proveedor, @fecha, @estado, @observaciones);

    SELECT SCOPE_IDENTITY() AS id_orden_compra;
END
GO

CREATE OR ALTER PROCEDURE dbo.sp_AgregarDetalleCompra
    @id_orden_compra INT,
    @id_producto INT,
    @lote NVARCHAR(50) = NULL,
    @vencimiento DATE = NULL,
    @cantidad INT,
    @precio_unitario DECIMAL(18,2) = NULL
AS
BEGIN
    SET NOCOUNT ON;
    INSERT INTO Ordenes_Compra_Detalle (id_orden_compra, id_producto, lote, vencimiento, cantidad, precio_unitario)
    VALUES (@id_orden_compra, @id_producto, @lote, @vencimiento, @cantidad, @precio_unitario);
END
GO

CREATE OR ALTER PROCEDURE dbo.sp_RegistrarRecepcionCompra
    @id_orden_compra INT,
    @usuario NVARCHAR(100) = NULL
AS
BEGIN
    SET NOCOUNT ON;
    -- Insertar cada detalle al stock y generar movimientos
    INSERT INTO Stock_Productos (id_producto, lote, vencimiento, cantidad, fecha_ingreso)
    SELECT d.id_producto, d.lote, d.vencimiento, d.cantidad, CAST(GETDATE() AS DATE)
    FROM Ordenes_Compra_Detalle d
    WHERE d.id_orden_compra = @id_orden_compra;

    INSERT INTO Movimientos_Stock (id_producto, lote, vencimiento, fecha, tipo, cantidad, observaciones)
    SELECT d.id_producto, d.lote, d.vencimiento, CAST(GETDATE() AS DATE), 'Entrada', d.cantidad,
           CONCAT('Recepción OC #', @id_orden_compra, CASE WHEN @usuario IS NULL THEN '' ELSE CONCAT(' por ', @usuario) END)
    FROM Ordenes_Compra_Detalle d
    WHERE d.id_orden_compra = @id_orden_compra;

    UPDATE Ordenes_Compra SET estado = 'Recibida' WHERE id_orden_compra = @id_orden_compra;
END
GO

CREATE OR ALTER PROCEDURE dbo.sp_DevolucionProveedor
    @id_orden_compra INT,
    @id_producto INT,
    @fecha DATE,
    @motivo NVARCHAR(200) = NULL,
    @cantidad INT
AS
BEGIN
    SET NOCOUNT ON;
    INSERT INTO Devoluciones_Proveedor (id_orden_compra, id_producto, fecha, motivo, cantidad)
    VALUES (@id_orden_compra, @id_producto, @fecha, @motivo, @cantidad);
END
GO

/*********************************************************************
 * CLIENTES
 *********************************************************************/
CREATE OR ALTER PROCEDURE dbo.sp_AltaCliente
    @codigo NVARCHAR(50),
    @razon_social NVARCHAR(200),
    @email NVARCHAR(200) = NULL,
    @formas_pago NVARCHAR(200) = NULL,
    @descuentos NVARCHAR(200) = NULL,
    @limite_credito DECIMAL(18,2) = 0
AS
BEGIN
    SET NOCOUNT ON;
    INSERT INTO Clientes (codigo, razon_social, email, formas_pago, descuentos, limite_credito)
    VALUES (@codigo, @razon_social, @email, @formas_pago, @descuentos, @limite_credito);

    SELECT SCOPE_IDENTITY() AS id_cliente;
END
GO

CREATE OR ALTER PROCEDURE dbo.sp_ModificarCliente
    @id_cliente INT,
    @codigo NVARCHAR(50),
    @razon_social NVARCHAR(200),
    @email NVARCHAR(200) = NULL,
    @formas_pago NVARCHAR(200) = NULL,
    @descuentos NVARCHAR(200) = NULL,
    @limite_credito DECIMAL(18,2) = 0
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE Clientes
    SET codigo = @codigo,
        razon_social = @razon_social,
        email = @email,
        formas_pago = @formas_pago,
        descuentos = @descuentos,
        limite_credito = @limite_credito
    WHERE id_cliente = @id_cliente;
END
GO

CREATE OR ALTER PROCEDURE dbo.sp_EliminarCliente
    @id_cliente INT
AS
BEGIN
    SET NOCOUNT ON;
    DELETE FROM Clientes WHERE id_cliente = @id_cliente;
END
GO

CREATE OR ALTER PROCEDURE dbo.sp_ListarClientes
    @razon_social NVARCHAR(200) = NULL,
    @codigo NVARCHAR(50) = NULL
AS
BEGIN
    SET NOCOUNT ON;
    SELECT * FROM Clientes
    WHERE (@razon_social IS NULL OR razon_social LIKE '%' + @razon_social + '%')
      AND (@codigo IS NULL OR codigo = @codigo);
END
GO

/*********************************************************************
 * VENTAS
 *********************************************************************/
CREATE OR ALTER PROCEDURE dbo.sp_CrearOrdenVenta
    @id_cliente INT,
    @fecha DATE,
    @estado NVARCHAR(50) = 'Pendiente',
    @observaciones NVARCHAR(500) = NULL
AS
BEGIN
    SET NOCOUNT ON;
    INSERT INTO Ordenes_Venta (id_cliente, fecha, estado, observaciones)
    VALUES (@id_cliente, @fecha, @estado, @observaciones);

    SELECT SCOPE_IDENTITY() AS id_orden_venta;
END
GO

CREATE OR ALTER PROCEDURE dbo.sp_AgregarDetalleVenta
    @id_orden_venta INT,
    @id_producto INT,
    @lote NVARCHAR(50) = NULL,
    @vencimiento DATE = NULL,
    @cantidad INT,
    @precio_unitario DECIMAL(18,2)
AS
BEGIN
    SET NOCOUNT ON;
    INSERT INTO Ordenes_Venta_Detalle (id_orden_venta, id_producto, lote, vencimiento, cantidad, precio_unitario)
    VALUES (@id_orden_venta, @id_producto, @lote, @vencimiento, @cantidad, @precio_unitario);

    INSERT INTO Stock_Reservado (id_producto, id_orden_venta, lote, vencimiento, cantidad, fecha)
    VALUES (@id_producto, @id_orden_venta, @lote, @vencimiento, @cantidad, CAST(GETDATE() AS DATE));
END
GO

CREATE OR ALTER PROCEDURE dbo.sp_RegistrarEntregaVenta
    @id_orden_venta INT,
    @usuario NVARCHAR(100) = NULL
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @id_producto INT, @cantidad INT, @lote NVARCHAR(50), @vencimiento DATE;

    DECLARE cur CURSOR LOCAL FAST_FORWARD FOR
        SELECT id_producto, cantidad, lote, vencimiento FROM Ordenes_Venta_Detalle WHERE id_orden_venta = @id_orden_venta;

    OPEN cur;
    FETCH NEXT FROM cur INTO @id_producto, @cantidad, @lote, @vencimiento;

    WHILE @@FETCH_STATUS = 0
    BEGIN
        DECLARE @remaining INT = @cantidad;

        IF @lote IS NOT NULL
        BEGIN
            UPDATE Stock_Productos
            SET cantidad = CASE WHEN cantidad >= @remaining THEN cantidad - @remaining ELSE 0 END
            WHERE id_producto = @id_producto AND lote = @lote AND (vencimiento = @vencimiento OR (@vencimiento IS NULL AND vencimiento IS NULL));

            INSERT INTO Movimientos_Stock (id_producto, lote, vencimiento, fecha, tipo, cantidad, observaciones)
            VALUES (@id_producto, @lote, @vencimiento, CAST(GETDATE() AS DATE), 'Salida', @cantidad,
                    CONCAT('Entrega OV #', @id_orden_venta, CASE WHEN @usuario IS NULL THEN '' ELSE CONCAT(' por ', @usuario) END));
        END
        ELSE
        BEGIN
            WHILE @remaining > 0
            BEGIN
                DECLARE @id_stock INT, @stock_cant INT, @stock_lote NVARCHAR(50), @stock_venc DATE;
                SELECT TOP 1 @id_stock = id_stock, @stock_cant = cantidad, @stock_lote = lote, @stock_venc = vencimiento
                FROM Stock_Productos
                WHERE id_producto = @id_producto AND cantidad > 0
                ORDER BY CASE WHEN vencimiento IS NULL THEN '9999-12-31' ELSE CONVERT(VARCHAR(10), vencimiento, 120) END ASC;

                IF @id_stock IS NULL BREAK;

                IF @stock_cant >= @remaining
                BEGIN
                    UPDATE Stock_Productos SET cantidad = cantidad - @remaining WHERE id_stock = @id_stock;
                    INSERT INTO Movimientos_Stock (id_producto, lote, vencimiento, fecha, tipo, cantidad, observaciones)
                    VALUES (@id_producto, @stock_lote, @stock_venc, CAST(GETDATE() AS DATE), 'Salida', @remaining,
                            CONCAT('Entrega OV #', @id_orden_venta, CASE WHEN @usuario IS NULL THEN '' ELSE CONCAT(' por ', @usuario) END));
                    SET @remaining = 0;
                END
                ELSE
                BEGIN
                    UPDATE Stock_Productos SET cantidad = 0 WHERE id_stock = @id_stock;
                    INSERT INTO Movimientos_Stock (id_producto, lote, vencimiento, fecha, tipo, cantidad, observaciones)
                    VALUES (@id_producto, @stock_lote, @stock_venc, CAST(GETDATE() AS DATE), 'Salida', @stock_cant,
                            CONCAT('Entrega OV #', @id_orden_venta, CASE WHEN @usuario IS NULL THEN '' ELSE CONCAT(' por ', @usuario) END));
                    SET @remaining = @remaining - @stock_cant;
                END
            END
        END

        FETCH NEXT FROM cur INTO @id_producto, @cantidad, @lote, @vencimiento;
    END

    CLOSE cur;
    DEALLOCATE cur;

    DELETE FROM Stock_Reservado WHERE id_orden_venta = @id_orden_venta;
    UPDATE Ordenes_Venta SET estado = 'Entregado' WHERE id_orden_venta = @id_orden_venta;
END
GO

CREATE OR ALTER PROCEDURE dbo.sp_DevolucionCliente
    @id_orden_venta INT,
    @id_producto INT,
    @fecha DATE,
    @motivo NVARCHAR(200) = NULL,
    @cantidad INT
AS
BEGIN
    SET NOCOUNT ON;
    INSERT INTO Devoluciones_Cliente (id_orden_venta, id_producto, fecha, motivo, cantidad)
    VALUES (@id_orden_venta, @id_producto, @fecha, @motivo, @cantidad);

    INSERT INTO Stock_Productos (id_producto, lote, vencimiento, cantidad, fecha_ingreso)
    VALUES (@id_producto, NULL, NULL, @cantidad, CAST(GETDATE() AS DATE));

    INSERT INTO Movimientos_Stock (id_producto, lote, vencimiento, fecha, tipo, cantidad, observaciones)
    VALUES (@id_producto, NULL, NULL, CAST(GETDATE() AS DATE), 'Entrada', @cantidad, CONCAT('Devolución Cliente OV #', @id_orden_venta));
END
GO

/*********************************************************************
 * ALMACEN / MOVIMIENTOS / SCRAP
 *********************************************************************/
CREATE OR ALTER PROCEDURE dbo.sp_RegistrarMovimientoStock
    @id_producto INT,
    @lote NVARCHAR(50) = NULL,
    @vencimiento DATE = NULL,
    @tipo NVARCHAR(50), -- 'Entrada' o 'Salida'
    @cantidad INT,
    @observaciones NVARCHAR(200) = NULL
AS
BEGIN
    SET NOCOUNT ON;
    INSERT INTO Movimientos_Stock (id_producto, lote, vencimiento, fecha, tipo, cantidad, observaciones)
    VALUES (@id_producto, @lote, @vencimiento, CAST(GETDATE() AS DATE), @tipo, @cantidad, @observaciones);

    IF @tipo = 'Entrada'
    BEGIN
        INSERT INTO Stock_Productos (id_producto, lote, vencimiento, cantidad, fecha_ingreso)
        VALUES (@id_producto, @lote, @vencimiento, @cantidad, CAST(GETDATE() AS DATE));
    END
    ELSE IF @tipo = 'Salida'
    BEGIN
        DECLARE @remaining INT = @cantidad;
        WHILE @remaining > 0
        BEGIN
            DECLARE @id_stock INT, @stock_cantidad INT;
            SELECT TOP 1 @id_stock = id_stock, @stock_cantidad = cantidad
            FROM Stock_Productos
            WHERE id_producto = @id_producto AND cantidad > 0
            ORDER BY CASE WHEN vencimiento IS NULL THEN '9999-12-31' ELSE CONVERT(VARCHAR(10), vencimiento, 120) END ASC;

            IF @id_stock IS NULL BREAK;

            IF @stock_cantidad > @remaining
            BEGIN
                UPDATE Stock_Productos SET cantidad = cantidad - @remaining WHERE id_stock = @id_stock;
                SET @remaining = 0;
            END
            ELSE
            BEGIN
                UPDATE Stock_Productos SET cantidad = 0 WHERE id_stock = @id_stock;
                SET @remaining = @remaining - @stock_cantidad;
            END
        END
    END
END
GO

CREATE OR ALTER PROCEDURE dbo.sp_RegistrarScrap
    @id_producto INT,
    @lote NVARCHAR(50) = NULL,
    @vencimiento DATE = NULL,
    @cantidad INT,
    @motivo NVARCHAR(100),
    @usuario NVARCHAR(100)
AS
BEGIN
    SET NOCOUNT ON;
    INSERT INTO Scrap (id_producto, lote, vencimiento, fecha, motivo, cantidad, usuario)
    VALUES (@id_producto, @lote, @vencimiento, CAST(GETDATE() AS DATE), @motivo, @cantidad, @usuario);

    DECLARE @remaining INT = @cantidad;
    WHILE @remaining > 0
    BEGIN
        DECLARE @id_stock INT, @stock_cantidad INT;
        SELECT TOP 1 @id_stock = id_stock, @stock_cantidad = cantidad
        FROM Stock_Productos
        WHERE id_producto = @id_producto AND cantidad > 0
        ORDER BY CASE WHEN vencimiento IS NULL THEN '9999-12-31' ELSE CONVERT(VARCHAR(10), vencimiento, 120) END ASC;

        IF @id_stock IS NULL BREAK;

        IF @stock_cantidad > @remaining
        BEGIN
            UPDATE Stock_Productos SET cantidad = cantidad - @remaining WHERE id_stock = @id_stock;
            SET @remaining = 0;
        END
        ELSE
        BEGIN
            UPDATE Stock_Productos SET cantidad = 0 WHERE id_stock = @id_stock;
            SET @remaining = @remaining - @stock_cantidad;
        END
    END

    INSERT INTO Movimientos_Stock (id_producto, lote, vencimiento, fecha, tipo, cantidad, observaciones)
    VALUES (@id_producto, @lote, @vencimiento, CAST(GETDATE() AS DATE), 'Salida', @cantidad, CONCAT('Scrap: ', @motivo, CASE WHEN @usuario IS NULL THEN '' ELSE CONCAT(' por ', @usuario) END));
END
GO

/*********************************************************************
 * REPORTES BASICOS
 *********************************************************************/
CREATE OR ALTER PROCEDURE dbo.sp_ReporteStockGeneral
AS
BEGIN
    SET NOCOUNT ON;
    SELECT p.id_producto, p.codigo, p.nombre, SUM(COALESCE(s.cantidad,0)) AS stock_total,
           p.stock_minimo, p.punto_reposicion
    FROM Productos p
    LEFT JOIN Stock_Productos s ON p.id_producto = s.id_producto
    GROUP BY p.id_producto, p.codigo, p.nombre, p.stock_minimo, p.punto_reposicion;
END
GO

CREATE OR ALTER PROCEDURE dbo.sp_VerificarPuntoReposicion
AS
BEGIN
    SET NOCOUNT ON;
    SELECT p.id_producto, p.codigo, p.nombre, p.punto_reposicion, SUM(COALESCE(s.cantidad,0)) AS stock_total
    FROM Productos p
    LEFT JOIN Stock_Productos s ON p.id_producto = s.id_producto
    GROUP BY p.id_producto, p.codigo, p.nombre, p.punto_reposicion
    HAVING SUM(COALESCE(s.cantidad,0)) <= p.punto_reposicion;
END
GO

/*********************************************************************
 * BITACORA
 *********************************************************************/
CREATE OR ALTER PROCEDURE dbo.sp_RegistrarBitacora
    @usuario NVARCHAR(100),
    @accion NVARCHAR(200),
    @modulo NVARCHAR(100)
AS
BEGIN
    SET NOCOUNT ON;
    INSERT INTO Bitacora (usuario, fecha, accion, modulo)
    VALUES (@usuario, GETDATE(), @accion, @modulo);
END
GO

-- FIN DEL ARCHIVO
