CREATE OR ALTER PROCEDURE dbo.sp_RegistrarEntregaVenta
    @id_orden_venta INT,
    @usuario NVARCHAR(100) = NULL
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @id_producto INT, @cantidad INT, @lote NVARCHAR(50), @vencimiento DATE;

    DECLARE cur CURSOR LOCAL FAST_FORWARD FOR
        SELECT id_producto, cantidad, lote, vencimiento FROM Ordenes_Venta_Detalle WHERE id_orden_venta = @id_orden_venta;

    OPEN cur;
    FETCH NEXT FROM cur INTO @id_producto, @cantidad, @lote, @vencimiento;

    WHILE @@FETCH_STATUS = 0
    BEGIN
        DECLARE @remaining INT = @cantidad;

        IF @lote IS NOT NULL
        BEGIN
            UPDATE Stock_Productos
            SET cantidad = CASE WHEN cantidad >= @remaining THEN cantidad - @remaining ELSE 0 END
            WHERE id_producto = @id_producto AND lote = @lote AND (vencimiento = @vencimiento OR (@vencimiento IS NULL AND vencimiento IS NULL));

            INSERT INTO Movimientos_Stock (id_producto, lote, vencimiento, fecha, tipo, cantidad, observaciones)
            VALUES (@id_producto, @lote, @vencimiento, CAST(GETDATE() AS DATE), 'Salida', @cantidad,
                    CONCAT('Entrega OV #', @id_orden_venta, CASE WHEN @usuario IS NULL THEN '' ELSE CONCAT(' por ', @usuario) END));
        END
        ELSE
        BEGIN
            WHILE @remaining > 0
            BEGIN
                DECLARE @id_stock INT, @stock_cant INT, @stock_lote NVARCHAR(50), @stock_venc DATE;
                SELECT TOP 1 @id_stock = id_stock, @stock_cant = cantidad, @stock_lote = lote, @stock_venc = vencimiento
                FROM Stock_Productos
                WHERE id_producto = @id_producto AND cantidad > 0
                ORDER BY CASE WHEN vencimiento IS NULL THEN '9999-12-31' ELSE CONVERT(VARCHAR(10), vencimiento, 120) END ASC;

                IF @id_stock IS NULL BREAK;

                IF @stock_cant >= @remaining
                BEGIN
                    UPDATE Stock_Productos SET cantidad = cantidad - @remaining WHERE id_stock = @id_stock;
                    INSERT INTO Movimientos_Stock (id_producto, lote, vencimiento, fecha, tipo, cantidad, observaciones)
                    VALUES (@id_producto, @stock_lote, @stock_venc, CAST(GETDATE() AS DATE), 'Salida', @remaining,
                            CONCAT('Entrega OV #', @id_orden_venta, CASE WHEN @usuario IS NULL THEN '' ELSE CONCAT(' por ', @usuario) END));
                    SET @remaining = 0;
                END
                ELSE
                BEGIN
                    UPDATE Stock_Productos SET cantidad = 0 WHERE id_stock = @id_stock;
                    INSERT INTO Movimientos_Stock (id_producto, lote, vencimiento, fecha, tipo, cantidad, observaciones)
                    VALUES (@id_producto, @stock_lote, @stock_venc, CAST(GETDATE() AS DATE), 'Salida', @stock_cant,
                            CONCAT('Entrega OV #', @id_orden_venta, CASE WHEN @usuario IS NULL THEN '' ELSE CONCAT(' por ', @usuario) END));
                    SET @remaining = @remaining - @stock_cant;
                END
            END
        END

        FETCH NEXT FROM cur INTO @id_producto, @cantidad, @lote, @vencimiento;
    END

    CLOSE cur;
    DEALLOCATE cur;

    DELETE FROM Stock_Reservado WHERE id_orden_venta = @id_orden_venta;
    UPDATE Ordenes_Venta SET estado = 'Entregado' WHERE id_orden_venta = @id_orden_venta;
END
GO